/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
plugins {
  id 'dev.clojurephant.clojure' version '0.5.0'
  id 'com.github.johnrengelman.shadow' version '5.2.0'
  id 'maven-publish'
}

description = "Cassandra/DSE Configuration Builder Library"
group = 'datastax'
version = '0.1.0-SNAPSHOT'

repositories {
  mavenCentral()
  maven {
    name = 'clojars'
    url = 'https://repo.clojars.org'
  }
}

sourceCompatibility = 1.8
targetCompatibility = 1.8

clojure {
    builds {
        main {
            aotAll()
        }
    }
}

sourceSets {
    main {
        clojure.srcDirs = ['src']

        resources {
            srcDirs = ['resources']
        }
    }
    test {
        clojure {
            it.srcDirs = ['test']
        }
        resources {
            srcDirs = ['test']
        }
    }
    dev {
        clojure.srcDirs = ['dev']
    }
}

configurations {
    compile {
        exclude group: 'org.clojure', module: 'tools.trace'

        // exclude commons-logging and log4j as we will be using slf4j
        // bridges for those libraries
        exclude group: 'commons-logging', module: 'commons-logging'
        exclude group: 'log4j', module: 'log4j'
    }
    devCompile.extendsFrom testCompile
}

dependencies {
    implementation "org.clojure:clojure:1.10.1"
    implementation "org.clojure:core.match:0.3.0-alpha5"
    implementation "org.clojure:core.memoize:0.5.9"
    implementation "slingshot:slingshot:0.12.2"
    implementation "org.yaml:snakeyaml:1.23"
    implementation "cheshire:cheshire:5.8.0"
    implementation ("selmer:selmer:0.9.7") { // templating lib
        exclude module: 'hiccups'
        exclude module: 'cheshire'
        exclude group: 'com.fasterxml.jackson.core', module: 'jackson-core'
        exclude group: 'com.fasterxml.jackson.dataformat', module: 'jackson-dataformat-smile'
    }
    devImplementation "org.clojure:tools.namespace:0.3.0-alpha4"
    testImplementation "junit:junit:4.12"
}

jar {
    manifest {
        attributes 'Main-Class': 'com.datastax.configbuilder.K8SOperatorConfigBuilder'
    }
}

/*
The credentials are provided typically in 'gradle.properties' in the project root.
If needed, the repo location and the credentials could be changed.
Place the values in 'gradle.properties' or pass them via the command line with -P switches.
*/

def propertyExists(name) {
    settings.hasProperty(name) || System.properties[(name)] != null
}
def propertiesExist(names) {
    names.every { propertyExists(it)}
}
def propertyValue(name) {
    settings.hasProperty(name) ? settings.getProperty(name) : System.properties[(name)]
}

if (propertiesExist(['datastaxRepositoryUsername', 'datastaxRepositoryPassword'])) {
  publishing {
    publications {
      mavenJava(MavenPublication) {
        groupId = 'com.datastax.configbuilder'
        artifactId = 'configbuilder'
        version = project.version.replace('SNAPSHOT', "-${gitCurrentHeadId().substring(0, 7)}")

        from components.java

        pom {
          name = 'ConfigBuilder'
          description = 'A library to produce cassandra configuration files.'
          licenses {
            license {
              name = 'The Apache License, Version 2.0'
              url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
            }
          }
        }
      }
    }

    repositories {
      maven {
        url = propertyValue('datastaxArtifactRepositoryUrl')
        credentials {
          username propertyValue('datastaxRepositoryUsername')
          password propertyValue('datastaxRepositoryPassword')
        }
      }
    }
  }
}
