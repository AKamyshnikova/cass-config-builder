name: Cass Config Builder Build & Deploy
on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]
jobs:
  build_operator_docker:
    name: Build Cass Config Builder Docker Image
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
        if: github.event_name == 'pull_request'
        with:
          ref: ${{ github.event.pull_request.head.sha }}
          submodules: true
      - uses: actions/checkout@v2
        if: github.event_name != 'pull_request'
        with:
          submodules: true
      - name: Login to GitHub Package Registry
        run: echo "${{ secrets.GITHUB_TOKEN }}" | docker login docker.pkg.github.com -u "${{ github.actor }}" --password-stdin
      - name: Setup Buildx
        id: buildx
        uses: crazy-max/ghaction-docker-buildx@v3
      - name: Cache Docker layers
        uses: actions/cache@v2
        id: cache
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-
          java-version: 1.8
      - name: Run tests
        if: github.event_name != 'pull_request' || github.event.pull_request.head.repo.full_name == 'datastax/cass-config-builder'
        env:
          ORG_GRADLE_PROJECT_dockerRegistry: docker.pkg.github.com
          ORG_GRADLE_PROJECT_dockerRegistryUsername: ${{ github.actor }}
          ORG_GRADLE_PROJECT_dockerRegistryPassword: ${{ secrets.GITHUB_TOKEN }}
        uses: eskatos/gradle-command-action@v1
        with:
          gradle-version: 6.0.1
          arguments: test
      - name: Build docker image
        run: |
          GITHUB_REPO_URL="https://github.com/${{ github.repository }}"

          VERSION_NUMBER="$(cat version.txt | tr -d '[:space:]')"
          VERSION_DATE="$(date -u +%Y%m%d)"
          RELEASE_VERSION="${VERSION_NUMBER}-${VERSION_DATE}"

          GH_REPOSITORY="docker.pkg.github.com/${{ github.repository_owner }}/cass-config-builder/cass-config-builder"

          GH_TAGS=(--tag "${GH_REPOSITORY}:${RELEASE_VERSION}")
          GH_UBI_TAGS=(--tag "${GH_REPOSITORY}:${RELEASE_VERSION}-ubi7")
          GH_ARM64_TAGS=(--tag "${GH_REPOSITORY}:${RELEASE_VERSION}-arm64")

          LABELS=(
            --label "release=$RELEASE_VERSION"
            --label "org.label-schema.schema-version=1.0"
            --label "org.label-schema.vcs-ref=$GITHUB_SHA"
            --label "org.label-schema.vcs-url=$GITHUB_REPO_URL"
            --label "org.label-schema.version=$RELEASE_VERSION"
          )

          COMMON_ARGS=(
            "${LABELS[@]}"
            --file docker/Dockerfile
            --cache-from "type=local,src=/tmp/.buildx-cache"
            --cache-to "type=local,dest=/tmp/.buildx-cache"
          )

          STANDARD_ARGS=(
            "${COMMON_ARGS[@]}"
            --target cass-config-builder
          )

          UBI_ARGS=(
            "${COMMON_ARGS[@]}"
            --target cass-config-builder-ubi
          )

          # GitHub packages does not presently support multiarch images, so we
          # will have to create independent tags for each arch. This feature is
          # coming though:
          #
          #    https://github.community/t/handle-multi-arch-docker-images-on-github-package-registry/14314/16
          #

          docker buildx build --load \
            "${GH_UBI_TAGS[@]}" \
            "${UBI_ARGS[@]}" \
            --platform linux/amd64 \
            .

          docker buildx build --load \
            "${GH_ARM64_TAGS[@]}" \
            "${STANDARD_ARGS[@]}" \
            --platform linux/arm64 \
            .

          docker buildx build --load \
            "${GH_TAGS[@]}" \
            "${STANDARD_ARGS[@]}" \
            --platform linux/amd64 \
            .

          TAGS_TO_PUSH=("${GH_ARM64_TAGS[@]}" "${GH_TAGS[@]}" "${GH_UBI_TAGS[@]}")
          echo "Pushing tags: " "${TAGS_TO_PUSH[@]}"

          # Note: Every even index of TAGS_TO_PUSH will be the string '--tag'
          #       so we skip over those while looping.

          for ((x=1; x<${#TAGS_TO_PUSH[@]}; x=x+2)); do
            docker push "${TAGS_TO_PUSH[x]}"
          done
